{
    "sourceFile": "quiz.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754712763456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754712804512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,9 +548,9 @@\n                 // Save state before asking\n                 saveStateToSession();\n \n                 // Use a friendly confirm dialog\n-                const message = `You're on question ${questionNum} of 15. Your progress has been saved! You can return to finish the quiz anytime.\\n\\nGo to ${destination} page?`;\n+                const message = `You're on question ${questionNum} of 15. Your progress has been saved!\\n\\nYou can return to finish the quiz anytime.\\n\\nGo to ${destination} page?`;\n \n                 if (confirm(message)) {\n                     // User wants to leave, allow navigation\n                     window.location.href = link.href;\n"
                },
                {
                    "date": 1754712820300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,9 +548,9 @@\n                 // Save state before asking\n                 saveStateToSession();\n \n                 // Use a friendly confirm dialog\n-                const message = `You're on question ${questionNum} of 15. Your progress has been saved!\\n\\nYou can return to finish the quiz anytime.\\n\\nGo to ${destination} page?`;\n+                const message = `You're on question ${questionNum} of 15. Your progress has been saved!\\nYou can return to finish the quiz anytime.\\n\\nGo to ${destination} page?`;\n \n                 if (confirm(message)) {\n                     // User wants to leave, allow navigation\n                     window.location.href = link.href;\n"
                }
            ],
            "date": 1754712763456,
            "name": "Commit-0",
            "content": "// Quiz Application State\nconst quizState = {\n    questions: [],\n    currentQuestionIndex: 0,\n    score: 0,\n    answers: [],\n    isReviewMode: false\n};\n\n// DOM Elements\nconst elements = {\n    startScreen: document.getElementById('startScreen'),\n    questionScreen: document.getElementById('questionScreen'),\n    resultsScreen: document.getElementById('resultsScreen'),\n    reviewScreen: document.getElementById('reviewScreen'),\n    startBtn: document.getElementById('startBtn'),\n    nextBtn: document.getElementById('nextBtn'),\n    reviewBtn: document.getElementById('reviewBtn'),\n    retryBtn: document.getElementById('retryBtn'),\n    backToResultsBtn: document.getElementById('backToResultsBtn'),\n    retryFromReviewBtn: document.getElementById('retryFromReviewBtn'),\n    startOverBtn: document.getElementById('startOverBtn'),\n    questionText: document.getElementById('questionText'),\n    optionsContainer: document.getElementById('optionsContainer'),\n    feedbackSection: document.getElementById('feedbackSection'),\n    feedbackHeader: document.getElementById('feedbackHeader'),\n    feedbackExplanation: document.getElementById('feedbackExplanation'),\n    progressBar: document.getElementById('progressBar'),\n    progressText: document.getElementById('progressText'),\n    finalScore: document.getElementById('finalScore'),\n    reviewContainer: document.getElementById('reviewContainer')\n};\n\n// Load questions from JSON file\nasync function loadQuestions() {\n    try {\n        const response = await fetch('questions.json');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error loading questions:', error);\n        // Fallback to hardcoded questions if JSON fails to load\n        return getHardcodedQuestions();\n    }\n}\n\n// Hardcoded questions as fallback\nfunction getHardcodedQuestions() {\n    return {\n        quiz: {\n            title: \"Fluoroquinolone Antibiotics Safety Quiz\",\n            settings: {\n                randomizeQuestions: true,\n                randomizeAnswers: true,\n                showImmediateFeedback: true,\n                allowReview: true\n            }\n        },\n        questions: [\n            {\n                id: \"q1\",\n                type: \"multiple-choice\",\n                question: \"Which of the following is NOT a fluoroquinolone antibiotic?\",\n                options: [\n                    { id: \"a\", text: \"Ciprofloxacin\", correct: false },\n                    { id: \"b\", text: \"Cephalexin\", correct: true },\n                    { id: \"c\", text: \"Avelox\", correct: false },\n                    { id: \"d\", text: \"Levofloxacin\", correct: false }\n                ],\n                explanation: \"Cephalexin is a cephalosporin antibiotic, not a fluoroquinolone. Ciprofloxacin, Avelox (moxifloxacin), and Levofloxacin are all fluoroquinolone antibiotics.\"\n            }\n            // Add more questions as needed for fallback\n        ]\n    };\n}\n\n// Shuffle array using Fisher-Yates algorithm\nfunction shuffleArray(array) {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n}\n\n// Initialize quiz\nasync function initQuiz() {\n    const quizData = await loadQuestions();\n\n    // Set up questions\n    quizState.questions = quizData.questions;\n\n    // Randomize questions if setting is enabled\n    if (quizData.quiz.settings.randomizeQuestions) {\n        quizState.questions = shuffleArray(quizState.questions);\n    }\n\n    // Randomize answer options for multiple choice questions\n    if (quizData.quiz.settings.randomizeAnswers) {\n        quizState.questions.forEach(question => {\n            if (question.type === 'multiple-choice' && question.options) {\n                // Check if there's an \"All of the Above\" option\n                const allOfAboveIndex = question.options.findIndex(opt =>\n                    opt.text.toLowerCase().includes('all of the above')\n                );\n\n                if (allOfAboveIndex !== -1) {\n                    // Remove \"All of the Above\" option temporarily\n                    const allOfAboveOption = question.options[allOfAboveIndex];\n                    const otherOptions = question.options.filter((_, index) => index !== allOfAboveIndex);\n\n                    // Shuffle other options\n                    const shuffledOthers = shuffleArray(otherOptions);\n\n                    // Add \"All of the Above\" back at the end\n                    question.options = [...shuffledOthers, allOfAboveOption];\n                } else {\n                    // No \"All of the Above\", shuffle normally\n                    question.options = shuffleArray(question.options);\n                }\n            }\n        });\n    }\n\n    // Save to session storage for persistence\n    saveStateToSession();\n}\n\n// Save state to session storage\nfunction saveStateToSession() {\n    sessionStorage.setItem('quizState', JSON.stringify(quizState));\n\n    // Show \"Progress saved\" indicator briefly\n    const savedIndicator = document.getElementById('progressSaved');\n    if (savedIndicator && quizState.currentQuestionIndex > 0) {\n        savedIndicator.classList.add('show');\n        setTimeout(() => {\n            savedIndicator.classList.remove('show');\n        }, 2000);\n    }\n}\n\n// Load state from session storage\nfunction loadStateFromSession() {\n    const savedState = sessionStorage.getItem('quizState');\n    if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        Object.assign(quizState, parsedState);\n        return true;\n    }\n    return false;\n}\n\n// Start quiz\nfunction startQuiz() {\n    quizState.currentQuestionIndex = 0;\n    quizState.score = 0;\n    quizState.answers = [];\n    quizState.isReviewMode = false;\n\n    hideAllScreens();\n    elements.questionScreen.classList.remove('hidden');\n    elements.feedbackSection.classList.add('hidden');\n\n    // Show progress section when quiz starts\n    document.querySelector('.progress-section').classList.add('active');\n\n    displayQuestion();\n    updateProgress();\n    saveStateToSession();\n}\n\n// Hide all screens\nfunction hideAllScreens() {\n    elements.startScreen.classList.add('hidden');\n    elements.questionScreen.classList.add('hidden');\n    elements.resultsScreen.classList.add('hidden');\n    elements.reviewScreen.classList.add('hidden');\n}\n\n// Display current question\nfunction displayQuestion() {\n    const question = quizState.questions[quizState.currentQuestionIndex];\n\n    // Update question text\n    elements.questionText.textContent = question.question;\n\n    // Clear previous options\n    elements.optionsContainer.innerHTML = '';\n    elements.feedbackSection.classList.add('hidden');\n\n    // Create options based on question type\n    if (question.type === 'true-false') {\n        displayTrueFalseOptions(question);\n    } else {\n        displayMultipleChoiceOptions(question);\n    }\n}\n\n// Display true/false options\nfunction displayTrueFalseOptions(question) {\n    const container = document.createElement('div');\n    container.className = 'true-false-container';\n\n    const trueBtn = createOptionButton('A. True', question.correct === true, question, 'A', 'True');\n    const falseBtn = createOptionButton('B. False', question.correct === false, question, 'B', 'False');\n\n    container.appendChild(trueBtn);\n    container.appendChild(falseBtn);\n    elements.optionsContainer.appendChild(container);\n}\n\n// Display multiple choice options\nfunction displayMultipleChoiceOptions(question) {\n    const labels = ['A', 'B', 'C', 'D'];\n    question.options.forEach((option, index) => {\n        const labeledText = `${labels[index]}. ${option.text}`;\n        const button = createOptionButton(labeledText, option.correct, question, option.id, option.text);\n        elements.optionsContainer.appendChild(button);\n    });\n}\n\n// Create option button\nfunction createOptionButton(displayText, isCorrect, question, optionId = null, originalText = null) {\n    const button = document.createElement('button');\n    button.className = 'option-button';\n    button.textContent = displayText;\n    button.setAttribute('aria-label', displayText);\n    button.setAttribute('data-original-text', originalText || displayText);\n\n    button.addEventListener('click', () => {\n        handleAnswerSelection(button, isCorrect, question, originalText || displayText);\n    });\n\n    // Add keyboard support\n    button.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            handleAnswerSelection(button, isCorrect, question, originalText || displayText);\n        }\n    });\n\n    return button;\n}\n\n// Handle answer selection\nfunction handleAnswerSelection(selectedButton, isCorrect, question, answerText) {\n    // Prevent multiple selections\n    if (selectedButton.classList.contains('disabled')) return;\n\n    // Disable all options\n    const allButtons = elements.optionsContainer.querySelectorAll('.option-button');\n    allButtons.forEach(btn => {\n        btn.classList.add('disabled');\n        btn.setAttribute('aria-disabled', 'true');\n    });\n\n    // Mark selected answer\n    if (isCorrect) {\n        selectedButton.classList.add('correct');\n        quizState.score++;\n    } else {\n        selectedButton.classList.add('incorrect');\n\n        // Show correct answer\n        if (question.type === 'true-false') {\n            const correctAnswer = question.correct ? 'A. True' : 'B. False';\n            allButtons.forEach(btn => {\n                if (btn.textContent === correctAnswer) {\n                    btn.classList.add('correct');\n                }\n            });\n        } else {\n            allButtons.forEach(btn => {\n                const originalText = btn.getAttribute('data-original-text');\n                const option = question.options.find(opt => opt.text === originalText);\n                if (option && option.correct) {\n                    btn.classList.add('correct');\n                }\n            });\n        }\n    }\n\n    // Mark unselected options\n    allButtons.forEach(btn => {\n        if (!btn.classList.contains('correct') && !btn.classList.contains('incorrect')) {\n            btn.classList.add('unselected');\n        }\n    });\n\n    // Store answer\n    quizState.answers.push({\n        questionId: question.id,\n        question: question.question,\n        userAnswer: answerText,\n        correctAnswer: getCorrectAnswerText(question),\n        isCorrect: isCorrect,\n        explanation: question.explanation\n    });\n\n    // Show feedback\n    showFeedback(isCorrect, question.explanation);\n\n    // Save state\n    saveStateToSession();\n}\n\n// Get correct answer text\nfunction getCorrectAnswerText(question) {\n    if (question.type === 'true-false') {\n        return question.correct ? 'True' : 'False';\n    } else {\n        const correctOption = question.options.find(opt => opt.correct);\n        return correctOption ? correctOption.text : '';\n    }\n}\n\n// Show feedback\nfunction showFeedback(isCorrect, explanation) {\n    elements.feedbackSection.classList.remove('hidden');\n\n    // Set feedback header\n    elements.feedbackHeader.textContent = isCorrect ? '✓ Correct!' : '✗ Incorrect';\n    elements.feedbackHeader.className = 'feedback-header ' + (isCorrect ? 'correct' : 'incorrect');\n\n    // Set explanation (use innerHTML to support links)\n    elements.feedbackExplanation.innerHTML = explanation;\n\n    // Update next button text\n    const isLastQuestion = quizState.currentQuestionIndex === quizState.questions.length - 1;\n    elements.nextBtn.textContent = isLastQuestion ? 'View Results' : 'Next Question';\n\n    // Scroll Next button into view on mobile\n    setTimeout(() => {\n        elements.nextBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }, 300);\n}\n\n// Move to next question\nfunction nextQuestion() {\n    if (quizState.currentQuestionIndex < quizState.questions.length - 1) {\n        quizState.currentQuestionIndex++;\n        displayQuestion();\n        updateProgress();\n        saveStateToSession();\n    } else {\n        showResults();\n    }\n}\n\n// Update progress bar and text\nfunction updateProgress() {\n    const progress = ((quizState.currentQuestionIndex + 1) / quizState.questions.length) * 100;\n    elements.progressBar.style.width = progress + '%';\n    elements.progressText.textContent = `Question ${quizState.currentQuestionIndex + 1} of ${quizState.questions.length}`;\n}\n\n// Show results\nfunction showResults() {\n    hideAllScreens();\n    elements.resultsScreen.classList.remove('hidden');\n\n    // Hide progress section on results\n    document.querySelector('.progress-section').classList.remove('active');\n\n    // Calculate percentage\n    const percentage = (quizState.score / quizState.questions.length) * 100;\n\n    // Format percentage (no decimal if .0, otherwise one decimal)\n    let percentageText;\n    if (percentage % 1 === 0) {\n        percentageText = percentage.toFixed(0) + '%';\n    } else {\n        percentageText = percentage.toFixed(1) + '%';\n    }\n\n    // Display score\n    elements.finalScore.textContent = `You scored ${quizState.score} out of ${quizState.questions.length} (${percentageText})`;\n\n    // Clear session storage\n    sessionStorage.removeItem('quizState');\n}\n\n// Show review screen\nfunction showReview() {\n    hideAllScreens();\n    elements.reviewScreen.classList.remove('hidden');\n\n    // Hide progress section on review\n    document.querySelector('.progress-section').classList.remove('active');\n\n    // Clear previous review items\n    elements.reviewContainer.innerHTML = '';\n\n    // Create review items for each answer\n    quizState.answers.forEach((answer, index) => {\n        const reviewItem = createReviewItem(answer, index + 1);\n        elements.reviewContainer.appendChild(reviewItem);\n    });\n}\n\n// Create review item\nfunction createReviewItem(answer, questionNumber) {\n    const item = document.createElement('div');\n    item.className = 'review-item ' + (answer.isCorrect ? 'correct' : 'incorrect');\n\n    const questionEl = document.createElement('div');\n    questionEl.className = 'review-question';\n    questionEl.textContent = `${questionNumber}. ${answer.question}`;\n    item.appendChild(questionEl);\n\n    const userAnswerEl = document.createElement('div');\n    userAnswerEl.className = 'review-answer user-answer';\n    userAnswerEl.innerHTML = `<strong>Your answer:</strong> ${answer.userAnswer} ${answer.isCorrect ? '✓' : '✗'}`;\n    item.appendChild(userAnswerEl);\n\n    if (!answer.isCorrect) {\n        const correctAnswerEl = document.createElement('div');\n        correctAnswerEl.className = 'review-answer correct-answer';\n        correctAnswerEl.innerHTML = `<strong>Correct answer:</strong> ${answer.correctAnswer}`;\n        item.appendChild(correctAnswerEl);\n    }\n\n    const explanationEl = document.createElement('div');\n    explanationEl.className = 'review-explanation';\n    explanationEl.innerHTML = answer.explanation;\n    item.appendChild(explanationEl);\n\n    return item;\n}\n\n// Reset quiz\nfunction resetQuiz() {\n    // Clear session storage first\n    sessionStorage.removeItem('quizState');\n\n    quizState.currentQuestionIndex = 0;\n    quizState.score = 0;\n    quizState.answers = [];\n    quizState.isReviewMode = false;\n\n    // Hide progress section\n    document.querySelector('.progress-section').classList.remove('active');\n\n    // Re-randomize questions\n    initQuiz().then(() => {\n        startQuiz();\n    });\n}\n\n// Start over function\nfunction startOver() {\n    // Clear all state\n    sessionStorage.clear();\n\n    // Reset quiz state\n    quizState.currentQuestionIndex = 0;\n    quizState.score = 0;\n    quizState.answers = [];\n    quizState.isReviewMode = false;\n\n    // Hide progress section\n    document.querySelector('.progress-section').classList.remove('active');\n\n    // Hide all screens and show start screen\n    hideAllScreens();\n    elements.startScreen.classList.remove('hidden');\n\n    // Re-initialize quiz\n    initQuiz();\n}\n\n// Event Listeners\nelements.startBtn.addEventListener('click', startQuiz);\nelements.nextBtn.addEventListener('click', nextQuestion);\nelements.reviewBtn.addEventListener('click', showReview);\nelements.retryBtn.addEventListener('click', resetQuiz);\nelements.backToResultsBtn.addEventListener('click', showResults);\nelements.retryFromReviewBtn.addEventListener('click', resetQuiz);\nelements.startOverBtn.addEventListener('click', startOver);\n\n// Keyboard navigation\ndocument.addEventListener('keydown', (e) => {\n    // Press Enter to continue when feedback is shown\n    if (!elements.feedbackSection.classList.contains('hidden') && e.key === 'Enter') {\n        nextQuestion();\n    }\n});\n\n// Initialize quiz on page load\nwindow.addEventListener('DOMContentLoaded', () => {\n    // Add keyboard shortcut to reset (Escape key on start screen)\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape' && !elements.startScreen.classList.contains('hidden')) {\n            sessionStorage.clear();\n            location.reload();\n        }\n    });\n\n    // Check for saved state\n    if (loadStateFromSession() && quizState.questions.length > 0) {\n        // Resume quiz from saved state\n        if (quizState.currentQuestionIndex < quizState.questions.length && quizState.answers.length > 0) {\n            hideAllScreens();\n            elements.questionScreen.classList.remove('hidden');\n            // Show progress section when resuming\n            document.querySelector('.progress-section').classList.add('active');\n            displayQuestion();\n            updateProgress();\n        } else if (quizState.answers.length === quizState.questions.length) {\n            // Quiz completed, show results\n            showResults();\n        } else {\n            // Invalid state, clear and restart\n            sessionStorage.clear();\n            initQuiz();\n        }\n    } else {\n        // Initialize new quiz\n        initQuiz();\n    }\n});\n\n// Handle page visibility change (save state when user leaves)\ndocument.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n        saveStateToSession();\n    }\n});\n\n// Handle navigation during quiz\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Add click handlers to navigation links\n    const navLinks = document.querySelectorAll('.nav-menu a:not(.active)');\n    navLinks.forEach(link => {\n        link.addEventListener('click', (e) => {\n            // Check if quiz is in progress\n            const isQuizInProgress = quizState.currentQuestionIndex > 0 &&\n                quizState.currentQuestionIndex < quizState.questions.length &&\n                quizState.answers.length < quizState.questions.length;\n\n            if (isQuizInProgress) {\n                e.preventDefault();\n                const questionNum = quizState.currentQuestionIndex + 1;\n                const destination = link.textContent.trim();\n\n                // Save state before asking\n                saveStateToSession();\n\n                // Use a friendly confirm dialog\n                const message = `You're on question ${questionNum} of 15. Your progress has been saved! You can return to finish the quiz anytime.\\n\\nGo to ${destination} page?`;\n\n                if (confirm(message)) {\n                    // User wants to leave, allow navigation\n                    window.location.href = link.href;\n                }\n            }\n        });\n    });\n});"
        }
    ]
}